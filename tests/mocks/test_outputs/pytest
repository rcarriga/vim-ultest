[1m============================= test session starts ==============================[0m
platform linux -- Python 3.8.6, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /home/ronan/tests
collected 12 items

test_a.py 
>>>>>>>>>>>>>>>>>>> PDB set_trace (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>
> /home/ronan/tests/test_a.py(21)test_b()
-> a[0] = 3
(Pdb) 
>>>>>>>>>>>>>>>>>>>>> PDB continue (IO-capturing resumed) >>>>>>>>>>>>>>>>>>>>>>
[31mF[0m[31mF[0m[31mF[0m[31m                                                            [ 25%][0m
test_b.py [31mF[0m[32m.[0m[31mF[0m[32m.[0m[31m                                                           [ 58%][0m
test_x.py [31mF[0m[31m                                                              [ 66%][0m
tests/test_c.py 
>>>>>>>>>>>>>>>>>>> PDB set_trace (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>
> /home/ronan/tests/tests/test_c.py(12)test_b22()
-> print("hello")
(Pdb) 
>>>>>>>>>>>>>>>>>>>>> PDB continue (IO-capturing resumed) >>>>>>>>>>>>>>>>>>>>>>
[32m.[0m[32m.[0m[31mF[0m[32m.[0m[31m                                                     [100%][0m

=================================== FAILURES ===================================
[31m[1m____________________________________ test_b ____________________________________[0m

    def test_b():
        """
        tests
    
        :param: b teststst
        """
        a = [[3, 1, 2, 3], 2, 4, 5]
        breakpoint()
>       a[0] = 3
[1m[31mE       Exception: OH NO[0m

[1m[31mtest_a.py[0m:21: Exception
----------------------------- Captured stdout call -----------------------------
[3, 2, 4, 5]
[3, 2, 4, 5]
[31m[1m_______________________________ TestClass.test_b _______________________________[0m

self = <test_a.TestClass testMethod=test_b>

    def test_b(self):
>       self.assertEqual({
            "a": 1,
         "b": 2,
         "c": 3},
         {"a": 1,
         "b": 5,
         "c": 3,
         "d": 4})
[1m[31mE       AssertionError: {'a': 1, 'b': 2, 'c': 3} != {'a': 1, 'b': 5, 'c': 3, 'd': 4}[0m
[1m[31mE       - {'a': 1, 'b': 2, 'c': 3}[0m
[1m[31mE       ?               ^[0m
[1m[31mE       [0m
[1m[31mE       + {'a': 1, 'b': 5, 'c': 3, 'd': 4}[0m
[1m[31mE       ?               ^        ++++++++[0m

[1m[31mtest_a.py[0m:29: AssertionError
[31m[1m_______________________________ TestClass.test_c _______________________________[0m

self = <test_a.TestClass testMethod=test_c>

    def test_c(self):
>       a_function()

[1m[31mtest_a.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def a_function():
        x = 3
        print(x)
>       raise Exception
[1m[31mE       Exception[0m

[1m[31mtests/__init__.py[0m:6: Exception
----------------------------- Captured stdout call -----------------------------
3
[31m[1m____________________________________ test_a ____________________________________[0m

    def test_a():
>       assert 2 == 3
[1m[31mE       assert 2 == 3[0m

[1m[31mtest_b.py[0m:5: AssertionError
[31m[1m____________________________________ test_d ____________________________________[0m

    def test_d():
>       assert 2 == 3
[1m[31mE       assert 2 == 3[0m

[1m[31mtest_b.py[0m:16: AssertionError
[31m[1m____________________________________ test_a ____________________________________[0m

    def test_a():
        x = {}
        x[1,2] = 2
        print(x)
>       assert False
[1m[31mE       assert False[0m

[1m[31mtest_x.py[0m:6: AssertionError
----------------------------- Captured stdout call -----------------------------
{(1, 2): 2}
[31m[1m___________________________________ test_a30 ___________________________________[0m

    def test_a30():
>       assert 2 == 3
[1m[31mE       assert 2 == 3[0m

[1m[31mtests/test_c.py[0m:23: AssertionError
=========================== short test summary info ============================
FAILED test_a.py::test_b - Exception: OH NO
FAILED test_a.py::TestClass::test_b - AssertionError: {'a': 1, 'b': 2, 'c': 3...
FAILED test_a.py::TestClass::test_c - Exception
FAILED test_b.py::test_a - assert 2 == 3
FAILED test_b.py::test_d - assert 2 == 3
FAILED test_x.py::test_a - assert False
FAILED tests/test_c.py::test_a30 - assert 2 == 3
FAILED test_a.py::test_parametrize[5] - assert 5 == 3
[31m========================= [31m[1m7 failed[0m, [32m5 passed[0m[31m in 3.74s[0m[31m ==========================[0m
